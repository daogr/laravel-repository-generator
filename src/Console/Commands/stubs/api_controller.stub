<?php

namespace DummyNamespace;

use App\Contracts\Repositories\UseDummyClassRepositoryContract;
use App\Http\Controllers\Controller;
use App\Http\Requests\UseDummyClassCreateRequest;
use App\Http\Requests\UseDummyClassUpdateRequest;
use App\Models\UseDummyClass;
use Illuminate\Contracts\Container\BindingResolutionException;
use Illuminate\Http\JsonResponse;
use Otodev\Exceptions\RepositoryException;
use Otodev\Traits\HasApiResponse;

class DummyClassController extends Controller
{
    use HasApiResponse;

    /**
     * @var DummyClassRepositoryContract
     */
    protected DummyClassRepositoryContract $repository;

    /**
     * DummyClassController constructor.
     */
    public function __construct(DummyClassRepositoryContract $repository)
    {
        $this->repository = $repository;

        /**
         * Authorize a resource action based on the incoming request.
         */
        $this->authorizeResource(DummyClass::class, DummyClass::class);
    }

    /**
     * Display a listing of the resource.
     */
    public function index(): JsonResponse
    {
        return $this->response($this->repository->paginate(), trans_choice('DummyTrans.retrieved_successfully', 2));
    }

    /**
     * Display the specified resource.
     *
     * @throws RepositoryException
     * @throws BindingResolutionException
     */
    public function show(int $id): JsonResponse
    {
        $resource = $this->repository->show($id);

        if (! $resource) {
            return $this->error(__('DummyTrans.not_found'));
        }

        return $this->response($resource, trans_choice('DummyTrans.retrieved_successfully', 1));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(DummyClassCreateRequest $request): JsonResponse
    {
        $resource = $this->repository->updateOrCreate($request->validated(), $request->validated());

        return $this->response($resource, __('DummyTrans.saved_successfully'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(DummyClassUpdateRequest $request, int $id): JsonResponse
    {
        $resource = $this->repository->update($request->validated(), $id);

        if (! $resource) {
            return $this->error(__('DummyTrans.not_found'));
        }

        return $this->response($resource, __('DummyTrans.updated_successfully'));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(int $id): JsonResponse
    {
        $resource = $this->repository->delete($id);

        if (! $resource) {
            return $this->error(__('DummyTrans.not_found'));
        }

        return $this->success(__('DummyTrans.deleted_successfully'));
    }
}
