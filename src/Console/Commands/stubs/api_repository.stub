<?php

    namespace DummyNamespace;

    use App\Contracts\Repositories\UseDummyClassRepositoryContract;
    use App\Http\Resources\UseDummyClassListResource;
    use App\Http\Resources\UseDummyClassShowResource;
    use App\Http\Resources\UseDummyClassStoreResource;
    use App\Http\Resources\UseDummyClassUpdateResource;
    use App\Models\UseDummyClass;
    use Illuminate\Contracts\Foundation\Application;
    use Illuminate\Contracts\Container\BindingResolutionException;
    use Otodev\Contracts\ValidatorContract;
    use Otodev\Criteria\BaseRequestCriteria;
    use Otodev\Eloquent\BaseRepository;
    use Otodev\Exceptions\RepositoryException;
    use Otodev\Utils\RepositoryUtil;

    /**
     * Class DummyClassRepository
     * @package DummyNamespace
     */
    class DummyClassRepository extends BaseRepository implements DummyClassRepositoryContract {

        /**
         * @var array
         */
        protected $fieldSearchable = [];

        /**
         * Specify Validator Rules.
         *
         * @var array
         */
        protected $rules = DummyClass::RULES;

        /**
         * RolesRepository constructor.
         *
         * @param Application $app
         *
         * @throws BindingResolutionException
         * @throws RepositoryException
         */
        public function __construct(Application $app) {
            parent::__construct($app);
        }

        /**
         * Specify Model class name.
         *
         * @return string
         */
        public function model() {
            return DummyClass::class;
        }

        /**
         * Boot up the repository, pushing criteria.
         *
         * @throws RepositoryException
         */
        public function boot() {
            //
        }

        /**
         * Save a new entity in repository.
         *
         * @param array $attributes
         *
         * @return \App\Http\Resources\UseDummyClassShowResource|\Eloquent|mixed
         * @throws \Illuminate\Contracts\Container\BindingResolutionException
         * @throws \Otodev\Exceptions\RepositoryException
         * @throws \Otodev\Exceptions\ValidatorException
         */
        public function create(array $attributes) {
            if(!$this->isSkippedResource()) {
                $attributes = (new DummyClassStoreResource($attributes))->additional(['fillable' => $this->model->getFillable()])->toArray(request());
            }

            $result = parent::create($attributes);

            if(!$this->isSkippedResource()) {
                return new DummyClassShowResource($result);
            }

            return $result;
        }

        /**
         * Update a entity in repository by id.
         *
         * @param array $attributes
         * @param int   $id
         *
         * @return \App\Http\Resources\UseDummyClassShowResource|bool|\Eloquent|\Eloquent[]|\Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model|mixed|null
         * @throws \Illuminate\Contracts\Container\BindingResolutionException
         * @throws \Otodev\Exceptions\RepositoryException
         * @throws \Otodev\Exceptions\ValidatorException
         */
        public function update(array $attributes, $id) {
            $exists = $this->exists($id);
            if(!$exists) {
                return $exists;
            }

            if(!$this->isSkippedResource()) {
                $attributes = (new DummyClassUpdateResource($attributes))->additional(['fillable' => $this->model->getFillable()])->toArray(request());
            }

            $result = parent::update($attributes, $id);

            if(!$this->isSkippedResource()) {
                return new DummyClassShowResource($result);
            }

            return $result;
        }

        /**
         * Update or Create an entity in repository.
         *
         * @param array $attributes
         * @param array $values
         * @param null  $action
         *
         * @return \App\Http\Resources\UseDummyClassShowResource|\Eloquent|\Illuminate\Database\Eloquent\Model|mixed
         * @throws \Illuminate\Contracts\Container\BindingResolutionException
         * @throws \Otodev\Exceptions\RepositoryException
         * @throws \Otodev\Exceptions\ValidatorException
         */
        public function updateOrCreate(array $attributes, array $values = [], $action = null) {
            $id = $attributes['Id'] ?? $attributes['id'] ?? null;

            if(!empty($id) && is_numeric($id)) {
                $action = ValidatorContract::RULE_UPDATE;
            }

            if(!$this->isSkippedResource()) {
                if($action == ValidatorContract::RULE_UPDATE) {
                    $values = (new DummyClassUpdateResource($values))->additional(['fillable' => $this->model->getFillable()])->toArray(request());

                } else {
                    $values = (new DummyClassStoreResource($values))->additional(['fillable' => $this->model->getFillable()])->toArray(request());
                }
            }

            $result = parent::updateOrCreate(['id' => $id], $values, $action);

            if(!$this->isSkippedResource()) {
                return new DummyClassShowResource($result);
            }

            return $result;
        }

        /**
         * Retrieve all data of repository, paginated.
         *
         * @param null     $limit
         * @param string[] $columns
         * @param string   $method
         *
         * @return mixed
         * @throws \Illuminate\Contracts\Container\BindingResolutionException
         * @throws \Otodev\Exceptions\RepositoryException
         */
        public function paginate($limit = null, $columns = ['*'], $method = 'paginate') {
            $this->pushCriteria(app(BaseRequestCriteria::class));

            $result = parent::paginate($limit, $columns, $method);

            if(!$this->isSkippedResource()) {
                $result = DummyClassListResource::collection($result);
            }

            return RepositoryUtil::paginate($result, $result->count(), $result->total());
        }
    }
